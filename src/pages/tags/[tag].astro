---
import Section from '@/components/Section.astro';
import Card from '@/components/Card.astro';
import Base from '@/layouts/Base.astro';
import Heading from '@/components/Heading.astro';
import { AppConfig } from '@/utils/AppConfig';
import { MarkdownInstance } from 'astro';
import { sortPostsByDate } from '@/utils/data.util';
import ProjectCard from '@/components/ProjectCard.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths(): Promise<any> {
  const allPosts = Object.values(
    import.meta.glob('../posts/*.md', { eager: true })
  ) as MarkdownInstance<any>[];

  const projects: CollectionEntry<'projects'>[] = await getCollection('projects');

  const allTags: Set<string> = new Set([
    ...allPosts.flatMap((post: MarkdownInstance<Record<string, any>>) => post.frontmatter.tags || []),
    ...projects.flatMap((p) => p.data.tags || []),
  ]);

  return [...allTags].map((tag) => {
    const filteredPosts = allPosts.filter((post: MarkdownInstance<Record<string, any>>) => (post.frontmatter.tags || []).includes(tag));
    filteredPosts.sort(sortPostsByDate);

    const filteredProjects = projects.filter((p) => (p.data.tags || []).includes(tag));

    return {
      params: { tag },
      props: {
        posts: filteredPosts,
        projects: filteredProjects,
      },
    };
  });
}

interface Props {
  posts: MarkdownInstance<Record<string, any>>[];
  projects: CollectionEntry<'projects'>[];
}

const { tag } = Astro.params;
const title = AppConfig.title;
const description = AppConfig.description;

const { posts, projects } = Astro.props as Props;
---

<Base head={{ title, description }}>
  <Section>
    <Heading title={`#${tag}`} />
    <div class="pt-2 text-center">
      <a href="/tags" class="underline hover:text-[var(--accent-500)]">all tags â†’</a>
    </div>
  </Section>

  {projects?.length ? (
    <Section>
      <h3 class="mb-3 text-lg font-bold">Projects</h3>
      <div class="flex flex-col gap-4">
        {projects.map((p) => (
          <ProjectCard project={p} />
        ))}
      </div>
    </Section>
  ) : null}

  {posts?.length ? (
    <Section>
      <h3 class="mb-3 text-lg font-bold">Posts</h3>
      {
        posts.map((post: any) => (
          <div class="mb-4 basis-1 last:mb-0">
            <Card post={post} />
          </div>
        ))
      }
    </Section>
  ) : null}
</Base>
